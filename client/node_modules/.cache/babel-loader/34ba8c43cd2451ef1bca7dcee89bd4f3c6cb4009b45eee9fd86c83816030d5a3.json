{"ast":null,"code":"var _jsxFileName = \"/Users/arnold/Documents/Programming/Development/chowstagram/client/src/scenes/loginPage/Form.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport FlexBetween from 'components/FlexBetween';\n// form library\nimport { Formik } from 'formik';\nimport Dropzone from 'react-dropzone';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { setLogin } from 'state';\n// validation library\nimport * as yup from 'yup';\nimport { EditOutlined } from '@mui/icons-material';\nimport { Box, Button, TextField, Typography, useMediaQuery, useTheme } from '@mui/material';\n\n// Schemas set up yup validation\n// create schemas, the `yup` validation schemas, determine how the form library is going to be saving this information. passing in all values for our schema\n// validate user's inputs, if it's not the intended input, user receives an error\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst registerSchema = yup.object().shape({\n  firstName: yup.string().required('required'),\n  lastName: yup.string().required('required'),\n  email: yup.string().email('invalid email').required('required'),\n  password: yup.string().required('required'),\n  picture: yup.string().required('required'),\n  location: yup.string().required('required'),\n  occupation: yup.string().required('required')\n});\nconst loginSchema = yup.object().shape({\n  email: yup.string().email('invalid email').required('required'),\n  password: yup.string().required('required')\n});\n\n// These set up initial values\nconst initialValuesRegister = {\n  firstName: '',\n  lastName: '',\n  email: '',\n  password: '',\n  picture: '',\n  location: '',\n  occupation: ''\n};\nconst initialValuesLogin = {\n  email: '',\n  password: ''\n};\nconst Form = () => {\n  _s();\n  // display a different form dependingon this Form's state\n  const [pageType, setPageType] = useState('login');\n  const {\n    palette\n  } = useTheme();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const isNonMobile = useMediaQuery('(min-width:37.5rem)');\n  // when using boolean, try to keep variable beginning with 'is_'\n  const isLogin = pageType === 'login';\n  const isRegister = pageType === 'register';\n  const register = async (values, onSubmitProps) => {\n    // this allows us to send form information with image\n    // because we have an image, this is one way to send the image through to the request body\n    const formData = new FormData();\n    // loop through every key value in the `values` object, and append it to `formData`. will cycle through all the values and add it to formData\n    for (let value in values) {\n      formData.append(value, values[value]);\n    }\n    formData.append('picturePath', values.picture.name);\n\n    // send this `formData` to this particular API call below\n    const savedUserResponse = await fetch('http://localhost:3001/auth/register', {\n      method: 'POST',\n      body: formData\n    });\n\n    // invoke the savedUserResponse as parseable form, aka json\n    const savedUser = await savedUserResponse.json();\n\n    // Formik resets the form once it's been submitted using `onSubmitProps`\n    onSubmitProps.resetForm();\n\n    // if successful in getting the user, we set page type to 'login', otherwise we aren't going to renavigate\n    if (savedUser) {\n      setPageType('login');\n    }\n  };\n  const login = async (values, onSubmitProps) => {\n    const loggedInResponse = await fetch('http://localhost:3001/auth/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(values)\n    });\n    const loggedIn = await loggedInResponse.json();\n\n    // if successful in loggin in, we reset the form\n    onSubmitProps.resetForm();\n\n    // once the user is successfully authenticated, we dispatch and setLogin user and login token to loggedIn.user and loggedIn.token, which is coming from Redux state. we are setting the user and the token inside our state inside our store\n    if (loggedIn) {\n      dispatch(setLogin({\n        user: loggedIn.user,\n        token: loggedIn.token\n      }));\n      navigate('/home');\n    }\n  };\n  const handleFormSubmit = async (values, onSubmitProps) => {\n    // if at isLogin page, we want to run a function that will call our backend that we've created for logging in\n    if (isLogin) await login(values, onSubmitProps);\n\n    // if at isRegister page, we want to run a function that will call our backend that we've created for registering an account\n    if (isRegister) await register(values, onSubmitProps);\n  };\n  return /*#__PURE__*/_jsxDEV(Formik\n  // 1) Formik is grabbing the handleFormSubmit\n  , {\n    onSubmit: handleFormSubmit\n    // if we're on the login page, show the initial values for login, if not, show the initial values for register\n    ,\n    initialValues: isLogin ? initialValuesLogin : initialValuesRegister,\n    validationSchema: isLogin ? loginSchema : registerSchema,\n    children: _ref => {\n      let {\n        values,\n        errors,\n        touched,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        setFieldValue,\n        resetForm\n      } = _ref;\n      return (\n        /*#__PURE__*/\n        // 3) so we can pass it to our onSubmit function\n        _jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            display: \"grid\",\n            gap: \"1.875rem\",\n            gridTemplateColumns: \"repeat(4, minmax(0, 1fr))\"\n            // smaller screens, this Box field will have span of 4\n            ,\n            sx: {\n              '& > div': {\n                gridColumn: isNonMobile ? undefined : 'span 4'\n              }\n            },\n            children: [isRegister && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                label: \"First name\",\n                onBlur: handleBlur,\n                onChange: handleChange,\n                value: values.firstName,\n                name: \"firstName\",\n                error: Boolean(touched.firstName) && Boolean(errors.firstName),\n                helperText: touched.firstName && errors.firstName,\n                sx: {\n                  gridColumn: 'span 2'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                label: \"Last name\",\n                onBlur: handleBlur,\n                onChange: handleChange,\n                value: values.lastName,\n                name: \"lastName\",\n                error: Boolean(touched.lastName) && Boolean(errors.lastName),\n                helperText: touched.lastName && errors.lastName,\n                sx: {\n                  gridColumn: 'span 2'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                label: \"Location\",\n                onBlur: handleBlur,\n                onChange: handleChange,\n                value: values.location,\n                name: \"location\",\n                error: Boolean(touched.location) && Boolean(errors.location),\n                helperText: touched.location && errors.location,\n                sx: {\n                  gridColumn: 'span 4'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                label: \"Occupation\",\n                onBlur: handleBlur,\n                onChange: handleChange,\n                value: values.occupation,\n                name: \"occupation\",\n                error: Boolean(touched.occupation) && Boolean(errors.occupation),\n                helperText: touched.occupation && errors.occupation,\n                sx: {\n                  gridColumn: 'span 4'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                gridColumn: \"span 4\",\n                border: `1px solid ${palette.neutral.medium}`,\n                borderRadius: \".3125rem\",\n                p: \"1rem\",\n                children: /*#__PURE__*/_jsxDEV(Dropzone, {\n                  acceptedFiles: \".jpg,.jpeg,.png\"\n                  // only one file can be uploaded\n                  ,\n                  multiple: false\n                  // need to set dropzone manually for setFieldValue\n                  ,\n                  onDrop: acceptedFiles => setFieldValue('picture', acceptedFiles[0]),\n                  children: _ref2 => {\n                    let {\n                      getRootProps,\n                      getInputProps\n                    } = _ref2;\n                    return /*#__PURE__*/_jsxDEV(Box, {\n                      ...getRootProps(),\n                      border: `.125rem dashed ${palette.primary.main}`,\n                      p: \"1rem\",\n                      sx: {\n                        '&:hover': {\n                          cursor: 'pointer'\n                        }\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                        ...getInputProps()\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 232,\n                        columnNumber: 25\n                      }, this), !values.picture ? /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: \"Upload profile photo\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 234,\n                        columnNumber: 27\n                      }, this) : /*#__PURE__*/_jsxDEV(FlexBetween, {\n                        children: [/*#__PURE__*/_jsxDEV(Typography, {\n                          children: values.picture.name\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 237,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(EditOutlined, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 238,\n                          columnNumber: 29\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 236,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 226,\n                      columnNumber: 23\n                    }, this);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true), /*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Email\",\n              onBlur: handleBlur,\n              onChange: handleChange,\n              value: values.email,\n              name: \"email\"\n              // if has been touched, or there is an error, show the error for this particular text field\n              ,\n              error: Boolean(touched.email) && Boolean(errors.email),\n              helperText: touched.email && errors.email\n              // larger screens, this text field will have span of 4\n              ,\n              sx: {\n                gridColumn: 'span 4'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Password\"\n              // hidden password\n              ,\n              type: \"password\",\n              onBlur: handleBlur,\n              onChange: handleChange,\n              value: values.password,\n              name: \"password\"\n              // if has been touched, or there is an error, show the error for this particular text field\n              ,\n              error: Boolean(touched.password) && Boolean(errors.password),\n              helperText: touched.password && errors.password\n              // larger screens, this text field will have span of 4\n              ,\n              sx: {\n                gridColumn: 'span 4'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              fullWidth: true,\n              type: \"submit\",\n              sx: {\n                m: '2rem 0',\n                p: '1rem',\n                backgroundColor: palette.primary.main,\n                color: palette.background.alt,\n                '&:hover': {\n                  color: [palette.primary.main]\n                }\n              },\n              children: isLogin ? 'LOGIN' : 'REGISTER'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              onClick: () => {\n                setPageType(isLogin ? 'register' : 'login');\n                // clear out inputs when switching between register and login forms\n                resetForm();\n              },\n              sx: {\n                textDecoration: 'underline',\n                color: palette.primary.main,\n                '&:hover': {\n                  cursor: 'pointer',\n                  color: palette.primary.light\n                }\n              },\n              children: isLogin ? `Don't have an account? Sign up here!` : `Already have an account? Login here`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 9\n        }, this)\n      );\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_s(Form, \"ag8CUnpELsnmoLh2oryYfupbdyc=\", false, function () {\n  return [useTheme, useDispatch, useNavigate, useMediaQuery];\n});\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["useState","FlexBetween","Formik","Dropzone","useDispatch","useNavigate","setLogin","yup","EditOutlined","Box","Button","TextField","Typography","useMediaQuery","useTheme","registerSchema","object","shape","firstName","string","required","lastName","email","password","picture","location","occupation","loginSchema","initialValuesRegister","initialValuesLogin","Form","pageType","setPageType","palette","dispatch","navigate","isNonMobile","isLogin","isRegister","register","values","onSubmitProps","formData","FormData","value","append","name","savedUserResponse","fetch","method","body","savedUser","json","resetForm","login","loggedInResponse","headers","JSON","stringify","loggedIn","user","token","handleFormSubmit","errors","touched","handleBlur","handleChange","handleSubmit","setFieldValue","gridColumn","undefined","Boolean","neutral","medium","acceptedFiles","getRootProps","getInputProps","primary","main","cursor","m","p","backgroundColor","color","background","alt","textDecoration","light"],"sources":["/Users/arnold/Documents/Programming/Development/chowstagram/client/src/scenes/loginPage/Form.jsx"],"sourcesContent":["import { useState } from 'react';\n\nimport FlexBetween from 'components/FlexBetween';\n// form library\nimport { Formik } from 'formik';\nimport Dropzone from 'react-dropzone';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { setLogin } from 'state';\n// validation library\nimport * as yup from 'yup';\n\nimport { EditOutlined } from '@mui/icons-material';\nimport {\n  Box,\n  Button,\n  TextField,\n  Typography,\n  useMediaQuery,\n  useTheme,\n} from '@mui/material';\n\n// Schemas set up yup validation\n// create schemas, the `yup` validation schemas, determine how the form library is going to be saving this information. passing in all values for our schema\n// validate user's inputs, if it's not the intended input, user receives an error\nconst registerSchema = yup.object().shape({\n  firstName: yup.string().required('required'),\n  lastName: yup.string().required('required'),\n  email: yup.string().email('invalid email').required('required'),\n  password: yup.string().required('required'),\n  picture: yup.string().required('required'),\n  location: yup.string().required('required'),\n  occupation: yup.string().required('required'),\n});\n\nconst loginSchema = yup.object().shape({\n  email: yup.string().email('invalid email').required('required'),\n  password: yup.string().required('required'),\n});\n\n// These set up initial values\nconst initialValuesRegister = {\n  firstName: '',\n  lastName: '',\n  email: '',\n  password: '',\n  picture: '',\n  location: '',\n  occupation: '',\n};\n\nconst initialValuesLogin = {\n  email: '',\n  password: '',\n};\n\nconst Form = () => {\n  // display a different form dependingon this Form's state\n  const [pageType, setPageType] = useState('login');\n  const { palette } = useTheme();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const isNonMobile = useMediaQuery('(min-width:37.5rem)');\n  // when using boolean, try to keep variable beginning with 'is_'\n  const isLogin = pageType === 'login';\n  const isRegister = pageType === 'register';\n\n  const register = async (values, onSubmitProps) => {\n    // this allows us to send form information with image\n    // because we have an image, this is one way to send the image through to the request body\n    const formData = new FormData();\n    // loop through every key value in the `values` object, and append it to `formData`. will cycle through all the values and add it to formData\n    for (let value in values) {\n      formData.append(value, values[value]);\n    }\n\n    formData.append('picturePath', values.picture.name);\n\n    // send this `formData` to this particular API call below\n    const savedUserResponse = await fetch(\n      'http://localhost:3001/auth/register',\n      {\n        method: 'POST',\n        body: formData,\n      }\n    );\n\n    // invoke the savedUserResponse as parseable form, aka json\n    const savedUser = await savedUserResponse.json();\n\n    // Formik resets the form once it's been submitted using `onSubmitProps`\n    onSubmitProps.resetForm();\n\n    // if successful in getting the user, we set page type to 'login', otherwise we aren't going to renavigate\n    if (savedUser) {\n      setPageType('login');\n    }\n  };\n\n  const login = async (values, onSubmitProps) => {\n    const loggedInResponse = await fetch('http://localhost:3001/auth/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(values),\n    });\n\n    const loggedIn = await loggedInResponse.json();\n\n    // if successful in loggin in, we reset the form\n    onSubmitProps.resetForm();\n\n    // once the user is successfully authenticated, we dispatch and setLogin user and login token to loggedIn.user and loggedIn.token, which is coming from Redux state. we are setting the user and the token inside our state inside our store\n    if (loggedIn) {\n      dispatch(\n        setLogin({\n          user: loggedIn.user,\n          token: loggedIn.token,\n        })\n      );\n      navigate('/home');\n    }\n  };\n\n  const handleFormSubmit = async (values, onSubmitProps) => {\n    // if at isLogin page, we want to run a function that will call our backend that we've created for logging in\n    if (isLogin) await login(values, onSubmitProps);\n\n    // if at isRegister page, we want to run a function that will call our backend that we've created for registering an account\n    if (isRegister) await register(values, onSubmitProps);\n  };\n\n  return (\n    <Formik\n      // 1) Formik is grabbing the handleFormSubmit\n      onSubmit={handleFormSubmit}\n      // if we're on the login page, show the initial values for login, if not, show the initial values for register\n      initialValues={isLogin ? initialValuesLogin : initialValuesRegister}\n      validationSchema={isLogin ? loginSchema : registerSchema}\n    >\n      {/* 2) Formik is grabbing the handleFormSubmit, and passing it into our Formik, so we can pass it to our onSubmit function  */}\n      {({\n        values,\n        errors,\n        touched,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        setFieldValue,\n        resetForm,\n      }) => (\n        // 3) so we can pass it to our onSubmit function\n\n        <form onSubmit={handleSubmit}>\n          <Box\n            display=\"grid\"\n            gap=\"1.875rem\"\n            gridTemplateColumns=\"repeat(4, minmax(0, 1fr))\"\n            // smaller screens, this Box field will have span of 4\n            sx={{\n              '& > div': { gridColumn: isNonMobile ? undefined : 'span 4' },\n            }}\n          >\n            {isRegister && (\n              <>\n                <TextField\n                  label=\"First name\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  value={values.firstName}\n                  name=\"firstName\"\n                  error={\n                    Boolean(touched.firstName) && Boolean(errors.firstName)\n                  }\n                  helperText={touched.firstName && errors.firstName}\n                  sx={{ gridColumn: 'span 2' }}\n                />\n                <TextField\n                  label=\"Last name\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  value={values.lastName}\n                  name=\"lastName\"\n                  error={Boolean(touched.lastName) && Boolean(errors.lastName)}\n                  helperText={touched.lastName && errors.lastName}\n                  sx={{ gridColumn: 'span 2' }}\n                />\n                <TextField\n                  label=\"Location\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  value={values.location}\n                  name=\"location\"\n                  error={Boolean(touched.location) && Boolean(errors.location)}\n                  helperText={touched.location && errors.location}\n                  sx={{ gridColumn: 'span 4' }}\n                />\n                <TextField\n                  label=\"Occupation\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  value={values.occupation}\n                  name=\"occupation\"\n                  error={\n                    Boolean(touched.occupation) && Boolean(errors.occupation)\n                  }\n                  helperText={touched.occupation && errors.occupation}\n                  sx={{ gridColumn: 'span 4' }}\n                />\n\n                <Box\n                  gridColumn=\"span 4\"\n                  border={`1px solid ${palette.neutral.medium}`}\n                  borderRadius=\".3125rem\"\n                  p=\"1rem\"\n                >\n                  <Dropzone\n                    acceptedFiles=\".jpg,.jpeg,.png\"\n                    // only one file can be uploaded\n                    multiple={false}\n                    // need to set dropzone manually for setFieldValue\n                    onDrop={(acceptedFiles) =>\n                      setFieldValue('picture', acceptedFiles[0])\n                    }\n                  >\n                    {({ getRootProps, getInputProps }) => (\n                      <Box\n                        {...getRootProps()}\n                        border={`.125rem dashed ${palette.primary.main}`}\n                        p=\"1rem\"\n                        sx={{ '&:hover': { cursor: 'pointer' } }}\n                      >\n                        <input {...getInputProps()} />\n                        {!values.picture ? (\n                          <p>Upload profile photo</p>\n                        ) : (\n                          <FlexBetween>\n                            <Typography>{values.picture.name}</Typography>\n                            <EditOutlined />\n                          </FlexBetween>\n                        )}\n                      </Box>\n                    )}\n                  </Dropzone>\n                </Box>\n              </>\n            )}\n\n            {/* SECTION FOR REGISTER AND LOGIN */}\n\n            <TextField\n              label=\"Email\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              value={values.email}\n              name=\"email\"\n              // if has been touched, or there is an error, show the error for this particular text field\n              error={Boolean(touched.email) && Boolean(errors.email)}\n              helperText={touched.email && errors.email}\n              // larger screens, this text field will have span of 4\n              sx={{ gridColumn: 'span 4' }}\n            />\n\n            <TextField\n              label=\"Password\"\n              // hidden password\n              type=\"password\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              value={values.password}\n              name=\"password\"\n              // if has been touched, or there is an error, show the error for this particular text field\n              error={Boolean(touched.password) && Boolean(errors.password)}\n              helperText={touched.password && errors.password}\n              // larger screens, this text field will have span of 4\n              sx={{ gridColumn: 'span 4' }}\n            />\n          </Box>\n\n          {/* REGISTER AND LOGIN BUTTONS */}\n\n          <Box>\n            <Button\n              fullWidth\n              type=\"submit\"\n              sx={{\n                m: '2rem 0',\n                p: '1rem',\n                backgroundColor: palette.primary.main,\n                color: palette.background.alt,\n                '&:hover': { color: [palette.primary.main] },\n              }}\n            >\n              {isLogin ? 'LOGIN' : 'REGISTER'}\n            </Button>\n\n            <Typography\n              onClick={() => {\n                setPageType(isLogin ? 'register' : 'login');\n                // clear out inputs when switching between register and login forms\n                resetForm();\n              }}\n              sx={{\n                textDecoration: 'underline',\n                color: palette.primary.main,\n                '&:hover': {\n                  cursor: 'pointer',\n                  color: palette.primary.light,\n                },\n              }}\n            >\n              {isLogin\n                ? `Don't have an account? Sign up here!`\n                : `Already have an account? Login here`}\n            </Typography>\n          </Box>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default Form;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}