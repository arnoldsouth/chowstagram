{"ast":null,"code":"var _jsxFileName = \"/Users/arnold/Documents/Programming/Development/chowstagram/client/src/index.js\";\nimport './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { FLUSH, PAUSE, PERSIST, persistReducer, persistStore, PURGE, REGISTER, REHYDRATE } from 'redux-persist';\n// user information is stored locally even when browsers/tabs are closed. user must clear cache to remove info\nimport { PersistGate } from 'redux-persist/integration/react';\nimport storage from 'redux-persist/lib/storage';\nimport { configureStore } from '@reduxjs/toolkit';\nimport App from './App';\nimport authReducer from './state';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst persistConfig = {\n  key: 'root',\n  storage,\n  version: 1\n};\nconst persistedReducer = persistReducer(persistConfig, authReducer);\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoreActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  })\n});\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(Provider, {\n    store: store,\n    children: /*#__PURE__*/_jsxDEV(PersistGate, {\n      loading: null,\n      persistor: persistStore(store),\n      children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 45,\n  columnNumber: 3\n}, this));","map":{"version":3,"names":["React","ReactDOM","Provider","FLUSH","PAUSE","PERSIST","persistReducer","persistStore","PURGE","REGISTER","REHYDRATE","PersistGate","storage","configureStore","App","authReducer","persistConfig","key","version","persistedReducer","store","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoreActions","root","createRoot","document","getElementById","render"],"sources":["/Users/arnold/Documents/Programming/Development/chowstagram/client/src/index.js"],"sourcesContent":["import './index.css';\n\nimport React from 'react';\n\nimport ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport {\n  FLUSH,\n  PAUSE,\n  PERSIST,\n  persistReducer,\n  persistStore,\n  PURGE,\n  REGISTER,\n  REHYDRATE,\n} from 'redux-persist';\n// user information is stored locally even when browsers/tabs are closed. user must clear cache to remove info\nimport { PersistGate } from 'redux-persist/integration/react';\nimport storage from 'redux-persist/lib/storage';\n\nimport { configureStore } from '@reduxjs/toolkit';\n\nimport App from './App';\nimport authReducer from './state';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  version: 1,\n};\n\nconst persistedReducer = persistReducer(persistConfig, authReducer);\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoreActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n});\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate\n        loading={null}\n        persistor={persistStore(store)}\n      >\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>\n);\n"],"mappings":";AAAA,OAAO,aAAa;AAEpB,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,SAASC,QAAQ,QAAQ,aAAa;AACtC,SACEC,KAAK,EACLC,KAAK,EACLC,OAAO,EACPC,cAAc,EACdC,YAAY,EACZC,KAAK,EACLC,QAAQ,EACRC,SAAS,QACJ,eAAe;AACtB;AACA,SAASC,WAAW,QAAQ,iCAAiC;AAC7D,OAAOC,OAAO,MAAM,2BAA2B;AAE/C,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,WAAW,MAAM,SAAS;AAAC;AAElC,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,MAAM;EACXL,OAAO;EACPM,OAAO,EAAE;AACX,CAAC;AAED,MAAMC,gBAAgB,GAAGb,cAAc,CAACU,aAAa,EAAED,WAAW,CAAC;AACnE,MAAMK,KAAK,GAAGP,cAAc,CAAC;EAC3BQ,OAAO,EAAEF,gBAAgB;EACzBG,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE;MACjBC,aAAa,EAAE,CAACtB,KAAK,EAAEO,SAAS,EAAEN,KAAK,EAAEC,OAAO,EAAEG,KAAK,EAAEC,QAAQ;IACnE;EACF,CAAC;AACL,CAAC,CAAC;AAEF,MAAMiB,IAAI,GAAGzB,QAAQ,CAAC0B,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eACT,QAAC,KAAK,CAAC,UAAU;EAAA,uBACf,QAAC,QAAQ;IAAC,KAAK,EAAEV,KAAM;IAAA,uBACrB,QAAC,WAAW;MACV,OAAO,EAAE,IAAK;MACd,SAAS,EAAEb,YAAY,CAACa,KAAK,CAAE;MAAA,uBAE/B,QAAC,GAAG;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA;EACK;IAAA;IAAA;IAAA;EAAA;AACL;EAAA;EAAA;EAAA;AAAA,QACM,CACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}