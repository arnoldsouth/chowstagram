{"ast":null,"code":"const {\n  createSlice\n} = require('@reduxjs/toolkit');\n\n// data that will be accessible throughout entire application. we don't need to pass in state and properties down to different components\n// initially, we are storing light mode (vs dark), user and token as null for auth, and posts for all our posts\nconst initialState = {\n  mode: 'light',\n  user: null,\n  token: null,\n  posts: []\n};\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  // reducers are actions, functions that involve modifying global state\n  reducers: {\n    setMode: state => {\n      state.mode = state.mode === 'light' ? 'dark' : 'light';\n    },\n    // with this action.payload, we have to pass it into its loggedIn dispatch as an object. see src/scenes/loginPage/Form.jsx at the login variable\n    setLogin: (state, action) => {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n    },\n    // when user hits logout, we set state.user and state.token to null\n    setLogout: state => {\n      state.user = null;\n      state.token = null;\n    },\n    // if user already exists, set the friends to our local state to keep the information\n    setFriends: (state, action) => {\n      if (state.user) {\n        state.user.friends = action.payload.friends;\n      } else {\n        console.error(`User friends is non-existent ðŸ˜”`);\n      }\n    },\n    setPosts: (state, action) => {\n      state.posts = action.payload.posts;\n    },\n    setPost: (state, action) => {\n      // grab our list of posts, map through each one. and if `post._id` is equal to the current post id that we're sending into this function, we're going to return that particular/relevant updated post from the backend. otherwise, we return what we currently have already\n      const updatedPosts = state.posts.map(post => {\n        if (post._id === action.payload.post_id) return action.payload.post;\n        return post;\n      });\n\n      // state.posts will now be the `updatedPosts` we just defined above\n      state.posts = updatedPosts;\n    }\n  }\n});\n\n// this is essentially our entire state\n\nexport const {\n  setMode,\n  setLogin,\n  setLogout,\n  setFriends,\n  setPosts,\n  setPost\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","require","initialState","mode","user","token","posts","authSlice","name","reducers","setMode","state","setLogin","action","payload","setLogout","setFriends","friends","console","error","setPosts","setPost","updatedPosts","map","post","_id","post_id","actions","reducer"],"sources":["/Users/arnold/Documents/Programming/Development/chowstagram/client/src/state/index.js"],"sourcesContent":["const { createSlice } = require('@reduxjs/toolkit');\n\n// data that will be accessible throughout entire application. we don't need to pass in state and properties down to different components\n// initially, we are storing light mode (vs dark), user and token as null for auth, and posts for all our posts\nconst initialState = {\n  mode: 'light',\n  user: null,\n  token: null,\n  posts: [],\n};\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  // reducers are actions, functions that involve modifying global state\n  reducers: {\n    setMode: (state) => {\n      state.mode = state.mode === 'light' ? 'dark' : 'light';\n    },\n\n    // with this action.payload, we have to pass it into its loggedIn dispatch as an object. see src/scenes/loginPage/Form.jsx at the login variable\n    setLogin: (state, action) => {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n    },\n\n    // when user hits logout, we set state.user and state.token to null\n    setLogout: (state) => {\n      state.user = null;\n      state.token = null;\n    },\n\n    // if user already exists, set the friends to our local state to keep the information\n    setFriends: (state, action) => {\n      if (state.user) {\n        state.user.friends = action.payload.friends;\n      } else {\n        console.error(`User friends is non-existent ðŸ˜”`);\n      }\n    },\n\n    setPosts: (state, action) => {\n      state.posts = action.payload.posts;\n    },\n\n    setPost: (state, action) => {\n      // grab our list of posts, map through each one. and if `post._id` is equal to the current post id that we're sending into this function, we're going to return that particular/relevant updated post from the backend. otherwise, we return what we currently have already\n      const updatedPosts = state.posts.map((post) => {\n        if (post._id === action.payload.post_id) return action.payload.post;\n\n        return post;\n      });\n\n      // state.posts will now be the `updatedPosts` we just defined above\n      state.posts = updatedPosts;\n    },\n  },\n});\n\n// this is essentially our entire state\n\nexport const { setMode, setLogin, setLogout, setFriends, setPosts, setPost } =\n  authSlice.actions;\n\nexport default authSlice.reducer;\n"],"mappings":"AAAA,MAAM;EAAEA;AAAY,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;;AAEnD;AACA;AACA,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGP,WAAW,CAAC;EACnCQ,IAAI,EAAE,MAAM;EACZN,YAAY;EACZ;EACAO,QAAQ,EAAE;IACRC,OAAO,EAAGC,KAAK,IAAK;MAClBA,KAAK,CAACR,IAAI,GAAGQ,KAAK,CAACR,IAAI,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;IACxD,CAAC;IAED;IACAS,QAAQ,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC3BF,KAAK,CAACP,IAAI,GAAGS,MAAM,CAACC,OAAO,CAACV,IAAI;MAChCO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACC,OAAO,CAACT,KAAK;IACpC,CAAC;IAED;IACAU,SAAS,EAAGJ,KAAK,IAAK;MACpBA,KAAK,CAACP,IAAI,GAAG,IAAI;MACjBO,KAAK,CAACN,KAAK,GAAG,IAAI;IACpB,CAAC;IAED;IACAW,UAAU,EAAE,CAACL,KAAK,EAAEE,MAAM,KAAK;MAC7B,IAAIF,KAAK,CAACP,IAAI,EAAE;QACdO,KAAK,CAACP,IAAI,CAACa,OAAO,GAAGJ,MAAM,CAACC,OAAO,CAACG,OAAO;MAC7C,CAAC,MAAM;QACLC,OAAO,CAACC,KAAK,CAAE,iCAAgC,CAAC;MAClD;IACF,CAAC;IAEDC,QAAQ,EAAE,CAACT,KAAK,EAAEE,MAAM,KAAK;MAC3BF,KAAK,CAACL,KAAK,GAAGO,MAAM,CAACC,OAAO,CAACR,KAAK;IACpC,CAAC;IAEDe,OAAO,EAAE,CAACV,KAAK,EAAEE,MAAM,KAAK;MAC1B;MACA,MAAMS,YAAY,GAAGX,KAAK,CAACL,KAAK,CAACiB,GAAG,CAAEC,IAAI,IAAK;QAC7C,IAAIA,IAAI,CAACC,GAAG,KAAKZ,MAAM,CAACC,OAAO,CAACY,OAAO,EAAE,OAAOb,MAAM,CAACC,OAAO,CAACU,IAAI;QAEnE,OAAOA,IAAI;MACb,CAAC,CAAC;;MAEF;MACAb,KAAK,CAACL,KAAK,GAAGgB,YAAY;IAC5B;EACF;AACF,CAAC,CAAC;;AAEF;;AAEA,OAAO,MAAM;EAAEZ,OAAO;EAAEE,QAAQ;EAAEG,SAAS;EAAEC,UAAU;EAAEI,QAAQ;EAAEC;AAAQ,CAAC,GAC1Ed,SAAS,CAACoB,OAAO;AAEnB,eAAepB,SAAS,CAACqB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}